Transactions :
{
	SchemaVersion : String, //v1.0
	PaymentInstructions :
	[	
		PaymentInstruction:
		{
			ContextSource :
			{
				Source : String, //LIFECAD
				TriggeringPaymentEventLocation : String, //[Site] decoded to Enum,
				TriggeringPaymentEvent : String, //[TransactionCd] decoded to Enum
				TriggeringPaymentEventId : String, //[ClaimNum]
				TriggeringPaymentEventDatetime : Timestamp, //[SystemProcessDate]
				TriggeringPaymentEventBatchCycleId : String, //[BatchNum]
				TriggeringPaymentEventBatchCycleDatetime : Timestamp, //[CycleDate]
			},
			VenerableLedgerProcessing : 
			{
				PaymentCompanyParty: // Lookup of party based on Alias = [LegalEntity] with AliasSet = "VenerableCompanies"
				{
					PartyId : String,
					PartyName : String
				},
				PaymentCompanyGeneralLedgerAccount:  //Lookup of Account based on AccountAlias = "VIAC" with AliasSet="VenerableAccounts"
				{
					AccountId : String,
					AccountAliasSet : String,
					AccountAlias : String
				},
				PaymentCompanyCostCenter: String, //[CostCenter]
				IntendedGeneralLedgerPostingDate: Date // [CycleDate]
			},
			PaymentInfo :
			{
				PaymentIssuerBankParty : //Lookup Party, Alias = [BankName], AliasSet = "BankingInstitutions"
				{
					PartyId : String,
					FullName : String,	
					ABA Routing Number: string 
				},
				PaymentIssuerBankAccount : //Lookup Account based on Alias = [CompanyBankAccount], AliasSet = "BankAccounts"
				{
					AccountId : String,
					AccountName : String,
					AccountAliasSet : String,
					AccountAlias : String
				},
				IntendedPaymentIssuerBankPostingDate : Timestamp, //[CycleDate]
				PaymentTransactionId: String, //Generate GUID
				Payment :
				{
					PaymentMechanism : String (Enum = CHECK, FEDWIRE, ACH), //Decode Enum from [TransType]
					CurrencyInstrument : //Lookup Instrument on SymbolFamily = "CURRENCIES", Symbol = "USD"
					{
						InstrumentId: String, 
						SymbolFamily : String,
						Symbol : String
					},
					CurrencyAmount : Decimal //[Amount]
				}
			},
			PayeeDetails:
			{
				AnnuityPolicyId : String, //[PolicyNum]
				PayeePolicyRole : String (Enum = ANNUITANT, BENEFICIARY, OTHER), //Decoded from [PayeeType] 
				PayeeParty : //Party lookup by Alias = concatenated [PayeeFName] + " " + [PayeeMInit} + " " + [PayeeLName], AliasSet = "PAYEES" 
				{
					PartyId : String,
					FullName : String,
					Address :
					{
						Street : String,
						City : String,
						State : String,
						Zip : String
					},
				},
				PaymentAnnotation : String //[Message]
			}		
			
		}
	]

}